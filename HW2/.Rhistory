ggplot(AQSdata, aes(x=SITE_LATITUDE, y=PM2.5)) +
geom_point() +
theme(text=element_text(size=14)) +
xlab("Latitude") +
ylab("PM2.5 Concentration") +
coord_flip()
ggplot(AQSdata, aes(x=SITE_LONGITUDE, y=PM2.5)) +
geom_point() +
theme(text=element_text(size=14)) +
xlab("Longitude") +
ylab("PM2.5") +
coord_flip()
ggplot(AQSdata, aes(x=SiteID, color=as.factor(SiteID), fill=as.factor(SiteID))) +
geom_histogram() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
sessionInfo()
rain.df <- read.table("rnf6080.dat")
head(rain.df)
nrow(rain.df)
ncol(rain.df)
colnames(rain.df)
rain.df[2,4]
rain.df[2,]
names(rain.df) <- c("year","month","day",seq(0,23))
rain.df <- mutate(rain.df, daily = `0` + `1` + `2` + `3` + `4` + `5` + `6` + `7` + `8` + `9` + `10` + `11` + `12` + `13` + `14` + `15` + `16` + `17` + `18` + `19` + `20` + `21` + `22` + `23`)
hist(rain.df$daily)
rain.df[rain.df == -999] <- NA
rain.df$daily <- c(rowSums(rain.df[,4:27],na.rm=TRUE))
hist(rain.df$daily)
z <- data.frame(z1="5",z2=7,z3=12)
z[1,2] + z[1,3]
my_solver <- function(A, b) {
X <- solve(A, b)
return(X)
}
n <- 100
set.seed(123)
A <- rWishart(1, 150, diag(n))[ , ,1]
b <- rnorm(n,1)
X <- my_solver(A,b)
AX = A %*% X
AX <- as.numeric(AX)
all.equal(AX, b, tolerance=0.000001)
AQSdata <- read.csv("AQSdata.csv")
colnames(AQSdata)[3] <- "SiteID"
colnames(AQSdata)[5] <- "PM2.5"
ggplot(AQSdata, aes(x = PM2.5, fill = COUNTY)) +
geom_density(alpha = 0.5) +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
ggplot(AQSdata, aes(x = PM2.5, fill = COUNTY)) +
geom_histogram(alpha = 0.5) +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
facet_wrap(~COUNTY_CODE, ncol=2)
# Fill = COUNTY for Legend
ggplot(AQSdata, aes(x = PM2.5, y = COUNTY)) +
geom_boxplot() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
aqs_data_median <- aggregate(PM2.5 ~ COUNTY, data=AQSdata, median)
aqs_data_median$County <- reorder(aqs_data_median$COUNTY, aqs_data_median$PM2.5)
ggplot(AQSdata, aes(x=reorder(COUNTY, PM2.5), y=PM2.5)) +
geom_boxplot() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
coord_flip()
ggplot(AQSdata, aes(x=SiteID, color=as.factor(SiteID), fill=as.factor(SiteID))) +
geom_histogram() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
AQSdata_site <- AQSdata[AQSdata$SiteID == "450190048",]
ggplot(AQSdata_site, aes(x=as.Date(Date,"%m/%d/%y"),y=PM2.5)) +
geom_line() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
xlab("Date")
ggplot(AQSdata, aes(x = as.Date(Date,"%m/%d/%y"), y = PM2.5, color = SiteID)) +
geom_line() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) +
xlab("Date")
ggplot(AQSdata, aes(x = as.Date(Date,"%m/%d/%y"), y = PM2.5, color = SiteID)) +
geom_line() +
theme(text=element_text(size=14)) +
xlab("Date") +
ylab("PM2.5 Concentration") +
facet_wrap(~SiteID, ncol=2)
ggplot(AQSdata, aes(x = as.Date(Date,"%m/%d/%y"), y = PM2.5, color = SiteID)) +
geom_line() +
theme(text=element_text(size=14)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
xlab("Date") +
ylab("PM2.5 Concentration") +
facet_wrap(~SiteID, ncol=2)
greenville_data <- AQSdata %>%
filter(COUNTY == "Greenville")
nrow(greenville_data)
#Convert date to date format
AQSdata$Date <- mdy(AQSdata$Date)
#Filter all the observations in Greenville in August 2021
greenville_aug_2021 <- AQSdata %>%
filter(COUNTY == "Greenville") %>%
filter(month(Date) == 8 & year(Date) == 2021)
#Check number of observations
nrow(greenville_aug_2021)
greenville_aug_2021_vars <- greenville_aug_2021 %>%
select(Date, PM2.5, SITE_LATITUDE, SITE_LONGITUDE)
head(greenville_aug_2021_vars)
ggplot(AQSdata, aes(x=SITE_LATITUDE, y=PM2.5)) +
geom_point() +
theme(text=element_text(size=14)) +
xlab("Latitude") +
ylab("PM2.5 Concentration") +
coord_flip()
ggplot(AQSdata, aes(x=SITE_LONGITUDE, y=PM2.5)) +
geom_point() +
theme(text=element_text(size=14)) +
xlab("Longitude") +
ylab("PM2.5") +
coord_flip()
knitr::opts_chunk$set(width=60, dev='png', warning=FALSE, message=FALSE, tidy.opts=list(width.cutoff=60), tid=TRUE, echo=FALSE)
# setting up the root directory
#load required libraries
library(tidyverse)
library(ggplot2)
library(dplyr)
library(gridExtra)
sessionInfo()
data_path <- 'rnf6080.dat'
#a. Load the data set, if the file is not present throw statement
if(file.exists(data_path)){
rain.df <- read.table(data_path)
} else{
print('file directory not present')
}
#b. Print number of rows and columns
sprintf('Number of rows in data - %d', nrow(rain.df))
sprintf('Number of Columns in data - %d', ncol(rain.df))
#c Print the names of the columns
cat('Name of the columns - ', names(rain.df))
#d Value at row 2 and column 4
sprintf('Value at row2 and column4 - %d', rain.df[2, 4])
#e Command to print whole second row
cat('Whole second row - ')
print(rain.df[2,])
#f
# Changes the names of the columns in the dataframe
names(rain.df) <- c("year", "month", "day", seq(0,23))
#g
rain.df['daily'] <- rowSums(rain.df[,seq(0, 23)])
rain.df %>% ggplot(aes(x=daily)) + geom_histogram(binwidth=5, color='dodgerblue3', fill='white', alpha=0.1)
#j replace -999 with 0 to fix the dataframe
rain.df[rain.df == -999] <- 0
rain.df['daily'] <- rowSums(rain.df[,seq(0, 23)])
rain.df %>% ggplot(aes(x=daily)) + geom_histogram(binwidth=5, color='dodgerblue3', fill='white', alpha=0.1) + xlab('Daily Rain Fall length') + ylab('Frequency') + ggtitle('Histogram of Daily rainfall') + theme(axis.text = element_text(size=14), plot.title = element_text(hjust = 0.5))
x <- c("5","12","7")
max(x)
sort(x)
# y <- c("5", 7, 12)
# y[2] + y[3]
# z <- data.frame(z1="5", z2=7, z3=12)
# z[1,2] + z[1,3]
#a
my_solver <- function(A,b){
# function that solves X in A*X=b (A*X is linear transformation)
return(solve(A, b))
}
verify_solution <- function(A, X, b){
# functions verifies A*X is equals to b
# round function is used to limit decimal places to five digits, else the equal signs gives false outputs due to near equal number
# the all function is to check all the values of the matrix is true
return(all(round(A%*%matrix(X), 5) == round(matrix(b), 5)))
}
# Test example
A <- rbind(c(1, 2, 3),
c(2, 2, 3),
c(3, 2, 8))
b <- c(20, 100, 200)
X <- my_solver(A,b)
print(verify_solution(A, X, b))
#b
n = 100
set.seed(123)
A = rWishart(1, 150, diag(n))[ , ,1]
b = rnorm(n,1)
X <- my_solver(A, b)
print(verify_solution(A, X, b))
data_path <- 'AQSdata.csv'
if(file.exists(data_path)){
aqs_data <- read_csv(data_path)
} else{
print('file directory not present')
}
aqs_data <- aqs_data %>% rename("Daily_Mean_PM2.5_Concentration" = 'Daily Mean PM2.5 Concentration')
ggplot(aqs_data, aes(x = Daily_Mean_PM2.5_Concentration, group=COUNTY, fill=COUNTY, alpha=0.2)) + geom_density() + xlab('Daily Mean PM2.5 Concentrations') + ylab('Density') +theme(axis.text = element_text(size=14))
#Below code gives the same result as above
# aqs_data %>% group_by(Daily_Mean_PM2.5_Concentration, COUNTY) %>% ggplot(aes(x=Daily_Mean_PM2.5_Concentration, fill=COUNTY, alpha=0.2)) + geom_density() + xlab('Daily Mean PM2.5 Concentrations') + ylab('Density') +theme(axis.text = element_text(size=14))
# ggplot(aqs_data, aes(x = Daily_Mean_PM2.5_Concentration, fill=COUNTY, alpha=0.2)) + geom_density() + xlab('Daily Mean PM2.5 Concentrations') + ylab('Density') +theme(axis.text = element_text(size=14))
#c
ggplot(aqs_data, aes(x = Daily_Mean_PM2.5_Concentration, group=COUNTY, fill=COUNTY, alpha=0.2)) +geom_density()+facet_wrap(~COUNTY) + xlab('Daily Mean PM2.5 Concentrations') + ylab('Density') +theme(axis.text = element_text(size=14))
#d
ggplot(aqs_data, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration, fill=COUNTY, alpha=0.2)) + geom_boxplot() + xlab('COUNTY') + ylab('Daily Mean PM2.5 Concentrations') +
theme(axis.text = element_text(size=14,angle = 90))
#e
ggplot(aqs_data, aes(x=reorder(COUNTY, Daily_Mean_PM2.5_Concentration, FUN=median), y=Daily_Mean_PM2.5_Concentration,fill=COUNTY, alpha=0.2)) + geom_boxplot()+ xlab('COUNTY') + ylab('Daily Mean PM2.5 Concentrations') + theme(axis.text = element_text(size=14,angle = 90))
aqs_data %>% rename('Site_ID'="Site ID") %>% group_by(Site_ID) %>% ggplot(aes(x=Daily_Mean_PM2.5_Concentration, fill=as.factor(Site_ID)))+geom_histogram(binwidth=1, alpha=0.8)
aqs_data %>% filter(`Site ID` == 450190048) %>% ggplot(aes(x=as.Date(Date, "%m/%d/%y"), y=Daily_Mean_PM2.5_Concentration, color='red')) + geom_line() + guides(color=guide_legend(title="SITE ID - 450190048"))+xlab('Time') + ylab('Daily Mean PM2.5 Concentrations') + theme(axis.text = element_text(size=14))
aqs_data %>% ggplot(aes(x=as.Date(Date, "%m/%d/%y"), y=Daily_Mean_PM2.5_Concentration, color=as.factor(`Site ID`))) + geom_line()
aqs_data %>% ggplot(aes(x=as.Date(Date, "%m/%d/%y"), y=Daily_Mean_PM2.5_Concentration, color=as.factor(`Site ID`))) + geom_line() +facet_wrap(~`Site ID`, ncol = 2)
#j
aqs_data %>% ggplot(aes(x=as.Date(Date, "%m/%d/%y"), y=Daily_Mean_PM2.5_Concentration, color=as.factor(`Site ID`))) + geom_line() + facet_wrap(~`Site ID`, ncol = 2) + theme(axis.text = element_text(size=14,angle = 45))
#a
aqs_data %>% filter(COUNTY == 'Greenville') %>% nrow() %>% print()
#b
aqs_data <- aqs_data %>% mutate(Date=as.Date(Date, "%m/%d/%y"))
august_2021 <- aqs_data %>% filter(between(Date, as.Date('08/01/2021', "%m/%d/%y"), as.Date('08/31/2021', "%m/%d/%y")))
august_2021_sub <- aqs_data %>% filter(between(Date, as.Date('08/01/2021', "%m/%d/%y"), as.Date('08/31/2021', "%m/%d/%y"))) %>% select(c('Daily_Mean_PM2.5_Concentration', 'SITE_LATITUDE', 'SITE_LONGITUDE'))
#d
p1 <- august_2021_sub %>% ggplot(aes(x=SITE_LATITUDE, y=Daily_Mean_PM2.5_Concentration)) + geom_point()
p2 <- august_2021_sub %>% ggplot(aes(x=SITE_LONGITUDE, y=Daily_Mean_PM2.5_Concentration)) + geom_point()
grid.arrange(p1, p2, ncol=2)
#c
ggplot(aqs_data, aes(x = Daily_Mean_PM2.5_Concentration, group=COUNTY, fill=COUNTY, alpha=0.2)) +geom_histogram()+facet_wrap(~COUNTY) + xlab('Daily Mean PM2.5 Concentrations') + ylab('Density') +theme(axis.text = element_text(size=14))
aqs_data %>% rename('Site_ID'="Site ID") %>% group_by(Site_ID) %>% ggplot(aes(x=Daily_Mean_PM2.5_Concentration, fill=as.factor(Site_ID)))+geom_histogram(binwidth=1, alpha=0.8)+facet_wrap(~COUNTY,ncol2)
aqs_data %>% rename('Site_ID'="Site ID") %>% group_by(Site_ID) %>% ggplot(aes(x=Daily_Mean_PM2.5_Concentration, fill=as.factor(Site_ID)))+geom_histogram(binwidth=1, alpha=0.8)+facet_wrap(~COUNTY,ncol=2)
c <- 4, 5, 5, 7, 7, 8, 8, 8, 8, 9, 10, 10, 12, 12, 14, 16
c <- (4, 5, 5, 7, 7, 8, 8, 8, 8, 9, 10, 10, 12, 12, 14, 16)
data <- c(4, 5, 5, 7, 7, 8, 8, 8, 8, 9, 10, 10, 12, 12, 14, 16)
quantile(data)
data <- c(4,  5,  5,  7,  7,  8,  8,  8,  8,  9, 10, 10, 12, 12, 14, 16)
quantile(data)
data <- c(180,209,210,211,213,214,220,221,222,225)
quantile(data)
mean(data)
sd(data)
hist(data)
median(data)
quantile(data)
summary(data)
data <- c(4,  5,  5,  7,  7,  8,  8,  8,  8,  9, 10, 10, 12, 12, 14, 16)
summary(data)
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
data("flights")
#Flight Dataset
data("nycflights")
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
data("nycflights")
#Flight Dataset
nycflights
#Flight Dataset
nycflights
#Flight Dataset
nycflights13
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
library(cran)
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
nycflights13
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
library(nycflights13)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
nycflights13
#Flight Dataset
data("nycflights")
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
library(nycflights13)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
data("nycflights")
head("nycflights")
#Flight Dataset
data("nycflights13")
head("nycflights13")
head(data("nycflights13"))
#Flight Dataset
require(nycflights13)
head(nycflights13)
help(nycflights13)
flights
install.packages(“nycflights13”)
install.packages('nycflights13')
install.packages("nycflights13")
install.packages("nycflights13")
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
library(nycflights13)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
#Flight Dataset
require(nycflights13)
flights
#Flight Dataset
require(nycflights13)
all_objects <- ls()
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
print(tables)
flights
# Load a dataset
data(mtcars)
# Get the names of all objects in the search path
all_objects <- search()
# Filter the list to include only data frames
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
# Load a dataset
data(mtcars)
# Get the names of all objects in the search path
all_objects <- search()
# Filter the list to include only data frames
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
#Flight Dataset
require(nycflights13)
all_objects <- ls()
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
print(tables)
flights
#Flight Dataset
require(nycflights13)
all_objects <- objects()
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
print(tables)
flights
#Flight Dataset
require(nycflights13)
all_objects <- objects()
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
print(tables)
flights
# Load the nycflights13 library
library(nycflights13)
# Get the names of all objects in the environment
all_objects <- ls()
# Filter the list to include only data frames
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
# Print the names of tables
print(tables)
# Load the nycflights13 library
library(nycflights13)
# Get the names of all objects in the environment
all_objects <- ls()
# Filter the list to include only data frames
tables <- all_objects[sapply(mget(all_objects), class) == "data.frame"]
# Print the names of tables
print(tables)
# Load the nycflights13 library
library(nycflights13)
nycflights13::flights
# Load the nycflights13 library
library(nycflights13)
nycflights13::flights
# Load the nycflights13 library
library(nycflights13)
head(nycflights13::flights)
head(nycflights13::flights)
# Load the nycflights13 library
library(nycflights13)
head(nycflights13::airlines)
head(nycflights13::airports)
head(nycflights13::flights)
head(nycflights13::planes)
head(nycflights13::weather)
# Load the nycflights13 library
library(nycflights13)
head(nycflights13::airlines)
head(nycflights13::airports)
head(nycflights13::flights)
head(nycflights13::planes)
head(nycflights13::weather)
# Load the nycflights13 library
library(nycflights13)
head(nycflights13::airlines)
head(nycflights13::airports)
head(nycflights13::flights)
head(nycflights13::planes)
head(nycflights13::weather)
M1 <- lm(arr_delay ~ dep_delay, data = flights)
summary(M1)
View(M1)
gc()
setwd("~/My Drive/Graduate Files/Data Analysis/HW2")
summary(M1)
library(formatR)
library(tidyverse)
library(GGally)
library(ggfortify)
library(nycflights13)
library(modelr)
library(magick)
library(haven)
library(dplyr)
library(ISLR)
library(lubridate)
library(ggplot2)
library(nycflights13)
knitr::opts_chunk$set(width = 60, warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
# Load the nycflights13 library
library(nycflights13)
head(nycflights13::airlines)
head(nycflights13::airports)
head(nycflights13::flights)
head(nycflights13::planes)
head(nycflights13::weather)
M1 <- lm(arr_delay ~ dep_delay, data = flights)
summary(M1)
M2 <- lm(arrival_delay ~ dep_delay + sched_arr_time + distance, data = flights)
M2 <- lm(arr_delay ~ dep_delay + sched_arr_time + distance, data = flights)
M2 <- lm(arr_delay ~ dep_delay + sched_arr_time + distance, data = flights)
summary(M2)
age = c(23,23,27,27,39,41,47,49,50,52,54,54,56,57,58,58,60,61)
fat = c(9.5,26.5,7.8,17.8,31.4,25.9,27.4,27.2,31.2,34.6,42.5,28.8,33.4,30.2,34.1,32.9,41.2,35.7)
library(ggplot2)
qqplot <- qplot(sample = fat, stat = "qq") + geom_abline(slope = 1, intercept = 0, color = "red")
print(qqplot)
qqplot2 <- ggplot(data.frame(fat), aes(sample = fat)) + stat_qq() + stat_qq_line(color = "red")
print(qqplot)
print(qqplot2)
qqplot2 <- ggplot(data.frame(fat), aes(sample = fat,age)) + stat_qq() + stat_qq_line(color = "red")
print(qqplot2)
qqplot2 <- ggplot(data.frame(fat), aes(x = fat, fill = age)) + stat_qq() + stat_qq_line(color = "red")
print(qqplot2)
qqplot2 <- ggplot(data.frame(fat), aes(sample = fat, y = age)) + stat_qq() + stat_qq_line(color = "red")
print(qqplot2)
